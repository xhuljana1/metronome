{"version":3,"sources":["click1.wav","click2.wav","Metronome.js","index.js"],"names":["module","exports","__webpack_require__","p","Metronome","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","startStop","state","playing","clearInterval","timer","setState","setInterval","playClick","bpm","count","_this$state","beatsPerMeasure","click2","play","click1","handleBpmChange","event","target","value","Audio","_this$state2","react_default","a","createElement","className","type","min","max","onChange","onClick","Component","ReactDOM","render","src_Metronome_0","document","getElementById"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mQCsGzBC,cAhGX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAaRQ,UAAY,WACJP,EAAKQ,MAAMC,SAEbC,cAAcV,EAAKW,OACnBX,EAAKY,SAAS,CACZH,SAAS,MAIXT,EAAKW,MAAQE,YACXb,EAAKc,UACJ,GAAKd,EAAKQ,MAAMO,IAAO,KAE1Bf,EAAKY,SACH,CACEI,MAAO,EACPP,SAAS,GAGXT,EAAKc,aAjCMd,EAuCjBc,UAAY,WAAM,IAAAG,EACmBjB,EAAKQ,MADxBS,EACRD,MADQC,EACDC,kBAGiB,EAC9BlB,EAAKmB,OAAOC,OAEZpB,EAAKqB,OAAOD,OAIdpB,EAAKY,SAAS,SAAAJ,GAAK,MAAK,CACtBQ,OAAQR,EAAMQ,MAAQ,GAAKR,EAAMU,oBAnDpBlB,EAuDjBsB,gBAAkB,SAAAC,GAChB,IAAMR,EAAMQ,EAAMC,OAAOC,MAErBzB,EAAKQ,MAAMC,SAEbC,cAAcV,EAAKW,OACnBX,EAAKW,MAAQE,YAAYb,EAAKc,UAAY,GAAKC,EAAO,KAGtDf,EAAKY,SAAS,CACZI,MAAO,EACPD,SAIFf,EAAKY,SAAS,CAAEG,SAnEpBf,EAAKQ,MAAQ,CACXC,SAAS,EACTO,MAAO,EACPD,IAAK,IACLG,gBAAiB,GAEnBlB,EAAKqB,OAAS,IAAIK,MAAML,KACxBrB,EAAKmB,OAAS,IAAIO,MAAMP,KAVPnB,wEA0EV,IAAA2B,EACkBxB,KAAKK,MAAtBC,EADDkB,EACClB,QAASM,EADVY,EACUZ,IAEjB,OACEa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,WAAMf,EAAN,QACAa,EAAAC,EAAAC,cAAA,SACAE,KAAK,QACLC,IAAI,KACJC,IAAI,MACJT,MAAOV,EACPoB,SAAUhC,KAAKmB,mBAEjBM,EAAAC,EAAAC,cAAA,UAAQM,QAASjC,KAAKI,WACrBE,EAAU,OAAS,iBA1FN4B,mBCAxBC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAAeC,SAASC,eAAe","file":"static/js/main.eb918b03.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","import React, { Component } from 'react';\nimport './Metronome.css';\nimport click1 from './click1.wav';\nimport click2 from './click2.wav';\n\nclass Metronome extends Component {\n    constructor(props) {\n      super(props);\n  \n      this.state = {\n        playing: false,\n        count: 0,\n        bpm: 100,\n        beatsPerMeasure: 4\n      };\n      this.click1 = new Audio(click1);\n      this.click2 = new Audio(click2);\n    }\n\n    \n    startStop = () => {\n        if (this.state.playing) {\n          // Stop the timer\n          clearInterval(this.timer);\n          this.setState({\n            playing: false\n          });\n        } else {\n          // Start a timer with the current BPM\n          this.timer = setInterval(\n            this.playClick,\n            (60 / this.state.bpm) * 1000\n          );\n          this.setState(\n            {\n              count: 0,\n              playing: true\n              // Play a click \"immediately\" (after setState finishes)\n            },\n            this.playClick\n          );\n        }\n      };\n\n\n      playClick = () => {\n        const { count, beatsPerMeasure } = this.state;\n      \n        // The first beat will have a different sound than the others\n        if (count % beatsPerMeasure === 0) {\n          this.click2.play();\n        } else {\n          this.click1.play();\n        }\n      \n        // Keep track of which beat we're on\n        this.setState(state => ({\n          count: (state.count + 1) % state.beatsPerMeasure\n        }));\n      };\n\n      handleBpmChange = event => {\n        const bpm = event.target.value;\n      \n        if (this.state.playing) {\n          // Stop the old timer and start a new one\n          clearInterval(this.timer);\n          this.timer = setInterval(this.playClick, (60 / bpm) * 1000);\n      \n          // Set the new BPM, and reset the beat counter\n          this.setState({\n            count: 0,\n            bpm\n          });\n        } else {\n          // Otherwise just update the BPM\n          this.setState({ bpm });\n        }\n      };\n  \n    render() {\n      const { playing, bpm } = this.state;\n  \n      return (\n        <div className=\"metronome\">\n          <div className=\"bpm-slider\">\n            <div>{bpm} BPM</div>\n            <input\n            type=\"range\"\n            min=\"60\"\n            max=\"240\"\n            value={bpm}\n            onChange={this.handleBpmChange} />\n          </div>\n          <button onClick={this.startStop}>\n          {playing ? 'Stop' : 'Start'}\n        </button>\n        </div>\n      );\n    }\n  }\n\nexport default Metronome;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Metronome from './Metronome';\nimport './index.css';\n\nReactDOM.render(<Metronome />, document.getElementById('root'));\n"],"sourceRoot":""}